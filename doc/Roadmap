TODO list
---------
Recommender functionality
 - automated hyperparameter search
 - add filtering mechanism (pre-filter, post-filter)
   - result diversification (Ziegler)
 - support for non-binary attributes: real, nominal, textual descriptions
 - directly support MovieLens u.item and u.user files and MovieLens 1M data format
 - support for more relation types: weighted, ternary, multiple relations
 - additional engines
   - item-to-item CF (Linden et al., 2003)
   - non-negative matrix factorization
   - matrix factorization learned with alternating least squares/batch gradient descent
   - adaptive kNN by Koren+Bell
   - MF with Euclidean Embeddings
   - scalable CF by Koren: http://research.yahoo.com/pub/2435
   - Maximum Margin Matrix Factorization http://www.ci.tuwien.ac.at/~alexis/immmf.pdf
   - Hashing for CF: http://jmlr.csail.mit.edu/proceedings/papers/v9/karatzoglou10a/karatzoglou10a.pdf
   - attribute-based engines using LIBSVM
   - Bayesian Probabilistic Matrix Factorization http://www.mit.edu/~rsalakhu/BPMF.html
   - Content-boosted CF http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.73.8546&rep=rep1&type=pdf
   - restricted boltzmann machines
 - time-aware rating and item prediction
   - timeSVD++
 - new engine types: TagRecommender, ContextAwareRecommender, SequentialRecommender
 - ensembles
   - ranking ensembles
   - stacking ensembles
   - ensembles for new users/new items
 - add more content-based routines (using Lemur?)
 - evaluation
   - allow new user evaluation for item prediction
   - support different CV protocols: leave-one-out, leave-one-out-per-user, k-fold CV, chronological splits, user-/item-stratified CV
   - support evaluation protocols w/ repeated events
   - faster evaluation routines
     - approximate AUC
     - sample precision@N
   - online update evaluation
 - consider to store the hyperparameters in the model files as well
Data types
 - data types: introduce more properties
 - data type: symmetric matrix
 - profile+optimize data types
Architecture
 - test suite should also run for purely binary installation
 - integrate with easyrec JavaScript API http://easyrec.org/ 
 - interface(s) for recommenders that support online updates
 - define an easy interface for rating data access
   - allow lazy iteration
   - allow random and randomized access
   - allow creating splits for cross-validation w/o duplicating data
   - (maybe) get num_users, num_items, max_user_id, max_item_id
 - rewrite rating data structures
   - implement easy interface (see above)
   - store in one list (as values, not references!)
   - create special index data structures on demand
 - redesign/rewrite implicit feedback data structures
 - user and item IDs should be unsigned integers, not signed integers
 - parameterize types:
   - user and item IDs
   - stored ratings
   - prediction values (in C++ port)
 - nicer, more generic structure for kNN engines
   - non-weighted kNN
   - more correlation/similarity measures (e.g. Jaccard index)
   - combine arbitrary similarity matrices
   - user-defined similarities
 - generic optimization interface and algorithms (like Mallet)
 - add a simple logging mechanism (interface with 4 delegates):
    - debug, info, warn; progress 
 - provide bindings for languages like Java, Ruby, Perl, Clojure, Scala, IronScheme, Boo, Nemerle
   - consider having upper case namespaces so that we can support IronRuby
 - use Parallel.ForEach for item recommender evaluation
   - as soon as Mono 2.8 is more widely available
 - Java port
 - multi-core support
 - GPU support
 - support for distributed computing
 - webservice interface
 - move unit tests out of main library
 - use one repository per component, instead of having everything in one repository
 - store models via reflection (can save a lot of code)
 - consider using simulated multiple inheritance for the attribute-based recommenders:
   http://www.codeproject.com/KB/architecture/smip.aspx
Misc
 - rewrite MF techniques using vector/matrix abstractions
 - faster reading of text files
 - get rid of min_rating and max_rating
 - output a nice table format for evaluation w/ R etc.
Documentation/website
 - document attribute-aware recommenders: using and implementing
 - document how to set up C# development environment for Ubuntu, Debian, etc.
 - document using MyMediaLite from F#, implementing engines in F#
 - generate HTML API docs and manual from XML/inline documentation
 - glossary where we explain commonly used terms
